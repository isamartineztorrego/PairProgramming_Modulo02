-- Pair Programming lecci칩n 07 Queries b치sicas
-- 1. Descarga la base de datos Northwind.
-- 2. Crea el schema con nombre northwind en MySQL Workbench para importar la base de datos:
<<<<<<< HEAD
-- CREATE SCHEMA northwind; no lo tenemos que crear porque se cre칩 con el script del ejercicio (en el que ven칤a la base de datos)
=======
-- CREATE SCHEMA northwind; (no lo creamos porque ya existe en nuestra base de datos).
>>>>>>> abf4d8bf752d6d905c030160cb962bc0cccc1089
USE northwind;

-- 4. Conociendo a las empleadas:
/* El objetivo de cualquier buena jefa (o trabajadora) en una empresa deber칤a ser conocer bien a sus compa침eras.
Para lograrlo, vamos a dise침ar una consulta SQL para obtener una lista con los datos de las empleadas y empleados de la empresa Northwind.
Esta consulta incluir치 los campos id, last_name y first_name.*/
SELECT id, last_name, first_name
FROM employees;

-- 5. Conociendo los productos m치s baratos:
/* Supongamos que en nuestro primer d칤a en la empresa nos informan que est치n llevando a cabo una reestructuraci칩n del negocio.
Nuestras compa침eras nos comentan que, en estos momentos, Northwind tiene una amplia gama de productos en venta, algunos de los cuales tienen un 칠xito limitado entre las clientas.
Nuestra primera tarea consiste en identificar aquellos productos (tabla products) cuyos precios por unidad oscilen entre 0 y 5 d칩lares, es decir, los productos m치s asequibles.*/
SELECT id, product_name, list_price
FROM products
WHERE list_price BETWEEN 0 AND 5;

-- 6. Conociendo los productos que no tienen precio:
/* Para comprobar si los datos en la tabla products est치n correctos, nos interesa seleccionar
aquellos productos que no tengan precio, porque lo hayan dejado vacio al introducir los datos (NULL).*/
SELECT id, product_name, list_price
FROM products
WHERE list_price IS NULL;

-- 7. Comparando productos:
/* Ahora obt칠n los datos de aquellos productos con un precio menor a 15 d칩lares, pero s칩lo aquellos que tienen un ID menor que 20
(para tener una muestra significativa pero no tener que ver todos los productos existentes).
游눠 Pista 游눠 Recuerda que podemos incluir varias condiciones en el WHERE.*/
SELECT id, product_name, list_price
FROM products
WHERE list_price <15 AND id <20;

-- 8. Cambiando de operadores:
/* Ahora vamos a hacer la misma consulta que en ejercicio anterior, pero invirtiendo el uso de los operadores
y queremos saber aquellos que tengan un precio superior a 15 d칩lares y un ID superior a 20.*/
SELECT id, product_name, list_price
FROM products
WHERE list_price >15 AND id >20;

-- 9. Conociendo los paises a los que vendemos:
/* A Northwind le interesa conocer los datos de los pa칤ses que hacen pedidos (orders) para focalizar el negocio en esas regiones
y al mismo tiempo crear campa침as de marketing para conseguir mejorar en las otras regiones. Realiza una consulta para obtener ese dato.*/
SELECT DISTINCT ship_country_region
FROM orders;

-- 10. Conociendo el tipo de productos que vendemos en Northwind:
/* Crea una consulta que muestre los primeros 10 productos seg칰n su ID
y que nos indique el nombre de dichos productos y sus precios.*/
SELECT id, product_name, list_price
FROM products
LIMIT 10;

-- 11. Ordenando los resultados:
/* Ahora realiza la misma consulta pero que nos muestre los 칰ltimos 10 productos seg칰n su ID de manera descendiente.*/
SELECT id, product_name, list_price
FROM products
ORDER BY id DESC
LIMIT 10;

-- 12. Que pedidos tenemos en nuestra BBDD:
/* 칔ltimamente ha habido algo de descontrol en la empresa a la hora de controlar los pedidos.
Nos interesa conocer los distintos pedidos que hemos tenido (mostrar los valores 칰nicos de ID en la tabla order_details).*/
SELECT DISTINCT order_id
FROM order_details;

-- 13. Qu칠 pedidos han gastado m치s:
/* Una vez hemos inspeccionado el tipo de pedidos que tenemos en la empresa, desde la direcci칩n nos piden conocer los 3 pedidos
que han supuesto un mayor ingreso para la empresa. Crea una columna en esta consulta con el alias ImporteTotal.
Nota: Utiliza unit_price y quantity para calcular el importe total.*/
SELECT unit_price*quantity AS importe_total
FROM order_details
ORDER BY importe_total DESC
LIMIT 3;

-- 14. Los pedidos que est치n entre las posiciones 5 y 10 de nuestro ranking:
/* Ahora, no sabemos bien por qu칠 raz칩n, desde el departamento de Ventas nos piden
seleccionar el ID de los pedidos situados entre la 5 y la 10 mejor posici칩n
en cuanto al coste econ칩mico total ImporteTotal.*/
SELECT unit_price*quantity AS importe_total, order_id
FROM order_details
ORDER BY importe_total DESC
<<<<<<< HEAD
LIMIT 10
OFFSET 5;
=======
LIMIT 5
OFFSET 10;
>>>>>>> abf4d8bf752d6d905c030160cb962bc0cccc1089

-- 15. Qu칠 categor칤as tenemos en nuestra BBDD:
/* De cara a ver c칩mo de diversificado est치 el negocio, se nos solicita una lista de las categor칤as
que componen los tipos de pedido de la empresa. Queremos que la lista de resultado
sea renombrada como "NombreDeCategoria".*/
SELECT DISTINCT category AS NombreDeCategoria
FROM products;

-- 16. Selecciona envios con retraso:
/* Nos hacen llegar desde la direcci칩n la preocupaci칩n acerca del cumplimiento de las fechas de env칤o. 칔ltimamente se est치n dando 
retrasos en muchas entregas y por ello se busca realizar la acci칩n preventiva de enviar los paquetes con varios d칤as adicionales de antelacion. 
Para comenzar a planear esos env칤os anticipados, nos piden conocer cu치l ser칤a la fecha de env칤o (ShippedDate) de los pedidos almacenados en la base de datos,
si estos sufrieran un retraso de 5 d칤as. Nos piden mostrar la nueva fecha renombrada como FechaRetrasada.
游눠 Pista 游눠 Para realizar lo anterior, busca documentaci칩n de la funci칩n DATE_ADD para MySQL.
https://www.w3schools.com/mysql/func_mysql_date_add.asp
https://www.w3schools.com/sql/func_sqlserver_dateadd.asp*/
-- ******************* pruebo formas pero siempre devuelve 0
SELECT DATE_ADD(shipped_date, INTERVAL 5 DAY) AS FechaRetrasada
FROM orders;

-- 17. Selecciona los productos m치s rentables:
/* Gracias a un an치lisis realizado en los 칰ltimos meses en la empresa, se ha comprobado que el rango de productos que puede dar 
m치s beneficios parece ser el de aquellos con un precio mayor o igual a 15 d칩lares, pero menor o igual que 50 d칩lares.
Selecciona los datos de ese rango de productos usando el operador BETWEEN.*/
SELECT id, product_name, list_price
FROM products
WHERE list_price BETWEEN 15 AND 50;

-- 18. Selecciona los productos con unos precios dados:
/* Queremos conocer los datos de los productos que tengan exactamente un precio de 18, 19 o 20 d칩lares
(un rango muy concreto de precios del products que la empresa quiere maximizar sus ventas en un futuro).
Usa IN para conseguirlo de manera eficiente.*/
SELECT id, product_name, list_price
FROM products
WHERE list_price IN (18, 19, 20);